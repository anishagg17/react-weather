{"version":3,"sources":["serviceWorker.js","utils/About.js","utils/Home.js","utils/Navbar.js","index.js"],"names":["Boolean","window","location","hostname","match","About","className","override","css","Api_Key","Home","state","ccity","ccountry","country","city","error","info","loading","cb","err","data","setState","obj","main","temp","humidity","weather","description","console","log","formSubmit","e","preventDefault","url","fetch","then","res","request","json","response","undefined","body","message","this","arr","key","push","map","size","color","onSubmit","placeholder","onChange","target","value","React","Component","Navbar","activeClassName","to","exact","App","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+XAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCTSC,G,OARD,WACV,OACI,yBAAKC,UAAU,OACX,qCACA,kD,iKCCZ,IAAMC,EAAWC,cAAH,KAIRC,EAAU,mCA6GDC,E,2MA3GXC,MAAQ,CACJC,MAAO,GACPC,SAAU,GACVC,QAAS,GACTC,KAAM,GACNC,OAAO,EACPC,KAAM,GACNC,SAAS,G,EAGbC,GAAK,SAACC,EAAKC,GACP,GAAID,EACA,OAAO,EAAKE,SAAS,CACjBN,MAAOI,EACPH,KAAMI,EACNH,SAAS,IAGjB,IAAIK,EAAM,GAKV,OAJAA,EAAG,YAAkBF,EAAKG,KAAKC,KAAO,QACtCF,EAAG,SAAeF,EAAKG,KAAKE,SAC5BH,EAAG,YAAkBF,EAAKM,QAAQ,GAAGC,YACrCC,QAAQC,IAAI,UAAWP,GAChB,EAAKD,SAAS,CAAEJ,SAAS,EAAOD,KAAMM,EAAKP,OAAO,K,EAG7De,WAAa,SAAAC,GACTA,EAAEC,iBAEF,EAAKX,SAAS,CACVJ,SAAS,EACTH,KAAM,EAAKJ,MAAMC,MACjBE,QAAS,EAAKH,MAAME,WAGxB,IAAME,EAAO,EAAKJ,MAAMC,MAClBE,EAAU,EAAKH,MAAME,SAC3BgB,QAAQC,IAAIf,GAGZ,IAAMmB,EAAG,2DAAuDnB,EAAvD,YAA+DD,EAA/D,kBAAgFL,EAAhF,iBACT0B,MAAMD,GAAKE,MAAK,SAAAC,GAAG,OAAIR,QAAQC,IAAIO,MACnCC,IAAQ,CAAEJ,MAAKK,MAAM,IAAQ,SAACvB,EAAOwB,GAEjC,OADAX,QAAQC,IAAI,YAAaU,GACrBxB,EACO,EAAKG,GAAGH,EAAO,SACWyB,IAA1BD,EAASE,KAAKC,QACd,EAAKxB,GAAGqB,EAASE,KAAKC,QAAS,SAE1C,EAAKxB,IAAG,EAAOqB,EAASE,U,wEAItB,IAAD,OACDF,EAAWI,KAAKjC,MAAMK,MAC1B,GAAI4B,KAAKjC,MAAMM,OAAS,KAAO2B,KAAKjC,MAAMK,MAAO,CAAC,IACtCC,EAAS2B,KAAKjC,MAAdM,KACRuB,EAAW,GACX,IAAIK,EAAM,GACV,IAAK,IAAIC,KAAO7B,EACZ4B,EAAIE,KAAKD,GAEbN,EAAWK,EAAIG,KAAI,SAAAF,GAAG,OAClB,6BACI,8BAAOA,GADX,MAC0B7B,EAAK6B,OAcvC,OATIF,KAAKjC,MAAMO,UACXsB,EACI,kBAAC,eAAD,CACIhC,IAAKD,EACL0C,KAAM,GACNC,MAAO,aAKf,yBAAK5C,UAAU,QACX,yBAAKA,UAAU,MAAf,eACA,yBAAKA,UAAU,MACX,uBAAGA,UAAU,QACb,0BAAM6C,SAAU,SAAAnB,GAAC,OAAI,EAAKD,WAAWC,KACjC,2BACI1B,UAAU,KACV8C,YAAY,OACZC,SAAU,SAAArB,GAAC,OACP,EAAKV,SAAS,CAAEV,MAAOoB,EAAEsB,OAAOC,WAGxC,2BACIjD,UAAU,KACV8C,YAAY,UACZC,SAAU,SAAArB,GAAC,OACP,EAAKV,SAAS,CAAET,SAAUmB,EAAEsB,OAAOC,WAG3C,4BAAQjD,UAAU,OAAlB,gBAGJ,yBAAKA,UAAU,OAAOkC,S,GAtGvBgB,IAAMC,WCcVC,EAtBA,WACX,OACI,yBAAKpD,UAAU,OACX,kBAAC,IAAD,CACIA,UAAU,OACVqD,gBAAgB,eAChBC,GAAG,IACHC,OAAK,GAJT,QAQA,kBAAC,IAAD,CACIvD,UAAU,OACVqD,gBAAgB,eAChBC,GAAG,UAHP,WCJNE,E,iLAEE,OACI,yBAAKxD,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOyD,KAAK,SAASF,OAAK,GACtB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOE,KAAK,KACR,kBAAC,EAAD,a,GAVNP,IAAMC,WAkBxBO,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SJiGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.35d12f0a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nconst About = () => {\n    return (\n        <div className=\"res\">\n            <h2>About</h2>\n            <span>Made By Anish</span>\n        </div>\n    )\n}\nexport default About\n","import React from 'react'\nimport request from 'request'\n// import Map from './Map'\nimport { css } from '@emotion/core'\nimport { PacmanLoader } from 'react-spinners'\n\nconst override = css`\n    // padding: 30px;\n    border-color: red;\n`\nconst Api_Key = '946d35d566e27385156baad2b0536fa2'\nclass Home extends React.Component {\n    state = {\n        ccity: '',\n        ccountry: '',\n        country: '',\n        city: '',\n        error: false,\n        info: {},\n        loading: false,\n    }\n\n    cb = (err, data) => {\n        if (err) {\n            return this.setState({\n                error: err,\n                info: data,\n                loading: false,\n            })\n        }\n        let obj = {}\n        obj['Temperature'] = data.main.temp + 'Â°C'\n        obj['Humidity'] = data.main.humidity\n        obj['Description'] = data.weather[0].description\n        console.log('from cb', obj)\n        return this.setState({ loading: false, info: obj, error: false })\n    }\n\n    formSubmit = e => {\n        e.preventDefault()\n        // console.log = function() {}\n        this.setState({\n            loading: true,\n            city: this.state.ccity,\n            country: this.state.ccountry,\n        })\n\n        const city = this.state.ccity\n        const country = this.state.ccountry\n        console.log(city)\n        // const url =\n        //     'https://api.openweathermap.org/data/2.5/weather?q=nahan,in&APPID=946d35d566e27385156baad2b0536fa2&units=metric'\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${Api_Key}&units=metric`\n        fetch(url).then(res => console.log(res))\n        request({ url, json: true }, (error, response) => {\n            console.log('using req', response)\n            if (error) {\n                return this.cb(error, {})\n            } else if (response.body.message !== undefined) {\n                return this.cb(response.body.message, {})\n            }\n            this.cb(false, response.body)\n        })\n    }\n\n    render() {\n        let response = this.state.error\n        if (this.state.info !== {} && !this.state.error) {\n            const { info } = this.state\n            response = ''\n            let arr = []\n            for (let key in info) {\n                arr.push(key)\n            }\n            response = arr.map(key => (\n                <div>\n                    <span>{key}</span> : {info[key]}\n                </div>\n            ))\n            // console.log(arr)\n        }\n        if (this.state.loading) {\n            response = (\n                <PacmanLoader\n                    css={override}\n                    size={90} // or 150px\n                    color={'#00ddff'}\n                />\n            )\n        }\n        return (\n            <div className=\"main\">\n                <div className=\"f0\">Weather App</div>\n                <div className=\"f1\">\n                    <p className=\"frm\"></p>\n                    <form onSubmit={e => this.formSubmit(e)}>\n                        <input\n                            className=\"in\"\n                            placeholder=\"City\"\n                            onChange={e =>\n                                this.setState({ ccity: e.target.value })\n                            }\n                        />\n                        <input\n                            className=\"in\"\n                            placeholder=\"Country\"\n                            onChange={e =>\n                                this.setState({ ccountry: e.target.value })\n                            }\n                        />\n                        <button className=\"btn\">Get Weather</button>\n                    </form>\n\n                    <div className=\"res\">{response}</div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Home\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst Navbar = () => {\n    return (\n        <div className=\"nav\">\n            <NavLink\n                className=\"navl\"\n                activeClassName=\"selectedLink\"\n                to=\"/\"\n                exact\n            >\n                Home\n            </NavLink>\n            <NavLink\n                className=\"navl\"\n                activeClassName=\"selectedLink\"\n                to=\"/about\"\n            >\n                About\n            </NavLink>\n        </div>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport './index.css'\nimport About from './utils/About'\nimport Home from './utils/Home'\nimport Navbar from './utils/Navbar'\nimport Error from './utils/Error'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <Navbar />\n                <Switch>\n                    <Route path=\"/about\" exact>\n                        <About />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n)\nserviceWorker.unregister()\n"],"sourceRoot":""}